{"version":3,"sources":["components/LoginForm.jsx","components/MessageFrom.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","console","log","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.810e9a8b.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport axios from 'axios';\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async(e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = { 'Project-ID': \"3c67aead-6773-4264-acce-13329c3d87be\", 'User-Name': username, 'User-Secret': password }\r\n\r\n        try{\r\n           await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n           localStorage.setItem('username' , username);\r\n           localStorage.setItem('password' , password);\r\n\r\n           window.location.reload();\r\n\r\n        }catch(error){\r\n             setError('Oops, incorrect credentials.');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n         <div className=\"wrapper\">\r\n             <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                              <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n             </div>\r\n\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm","\r\nimport {useState} from 'react';\r\nimport {sendMessage, isTyping } from 'react-chat-engine';\r\nimport {SendOutlined, PictureOutlined } from '@ant-design/icons';\r\n \r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const{ chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length >0) sendMessage(creds,chatId,{text});\r\n        setValue('');\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n         setValue(event.target.value);\r\n\r\n         isTyping(props,chatId);\r\n    }\r\n\r\n    const handleUplaod=(event)=> {\r\n        sendMessage(creds, chatId,{ files : event.target.files, text:''})\r\n    }\r\n\r\n    return (\r\n      <form className=\"message-form\" onSubmit={handleSubmit}>\r\n          <input\r\n              className=\"message-input\"\r\n              placeholder=\"Send a message...\"\r\n              value={value}\r\n              onChange={handleChange}\r\n              onSubmit={handleSubmit}\r\n          />\r\n          <label htmlFor=\"upload-button\">\r\n              <span className=\"image-button\">\r\n                <PictureOutlined className=\"picture-icon\"/>\r\n              </span>\r\n         </label> \r\n       <input\r\n          type=\"file\"\r\n          multiple={false}\r\n          id=\"upload-button\"\r\n          style={{display: 'none'}} \r\n          onChange={handleUplaod}\r\n       />\r\n       <button type=\"submit\" className=\"send-button\">\r\n           <SendOutlined className=\"send-icon\" />\r\n       </button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({message}) => {\r\n    if(message?.attachments?.length > 0){\r\n        return (\r\n            <img\r\n                src = {message.attachments[0].file}\r\n                alt = \"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float:'right' }}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n       <div className=\"message\" style={{float:'right', marginRight:'18px', color:'white', backgroundColor:'#3B2A50'}}>\r\n           {message.text}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","const TheirMessage = ({ lastMessage,message}) => {\r\n\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username ===! message.sender.username;\r\n\r\n    return (\r\n       <div className=\"message-row\">\r\n           {isFirstMessageByUser && (\r\n               <div \r\n                    className = \"message-avatar\"\r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n               />\r\n           )}\r\n\r\n           {message?.attachments?.length > 0\r\n                ? (\r\n                    <img\r\n                        src = {message.attachments[0].file}\r\n                        alt = \"message-attachment\"\r\n                        className=\"message-image\"\r\n                        style={{ \r\n                            marginLeft: isFirstMessageByUser ? '4px' : '48px' \r\n                         }}\r\n                    />\r\n                ) : (\r\n                        <div className=\"message\" style={{float:'left', backgroundColor:'#CABCDC',marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n                            {message.text}\r\n                        </div>\r\n                     \r\n                )\r\n           }\r\n    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TheirMessage;","import MessageForm from './MessageFrom';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\n\r\nconst ChatFeed = (props) => {\r\n   const { chats, activeChat , userName , messages  } = props;\r\n\r\n   const chat = chats && chats[activeChat];\r\n\r\n console.log(chat,userName,messages);\r\n\r\n const renderReadReceipts = (message, isMyMessage) => {\r\n  return chat.people.map((person, index)=> person.last_read === message.id && (\r\n     <div\r\n        key = {`read_${index}`}\r\n        className=\"read-receipt\"\r\n        style={{\r\n          float: isMyMessage ? 'right' : 'left',\r\n          backgroundImage : `url(${person?.person?.avatar})`\r\n        }}\r\n     />\r\n   ))\r\n }\r\n\r\n const renderMessages = () => {\r\n   const keys = Object.keys(messages);\r\n\r\n   return keys.map((key,index) => {\r\n     const message = messages[key];\r\n     const lastMessageKey = index===0 ? null : keys[index-1];\r\n     const isMyMessage = userName === message.sender.username;\r\n\r\n     return (\r\n       <div key={`msg_${index}`} style = {{width: '100%'}}>\r\n               <div className=\"message-block\">\r\n                 {\r\n                    isMyMessage \r\n                    ? <MyMessage message={message} /> \r\n                    : <TheirMessage message={message} lastMessage={message[lastMessageKey]} />\r\n                 }\r\n               </div>\r\n               <div className=\"read-receipts\" style={{marginRight: isMyMessage? '18px' : '0px' , marginLeft : isMyMessage ? '0px' : '68px'}}>\r\n                   {renderReadReceipts(message, isMyMessage)}\r\n               </div>\r\n       </div>\r\n     );\r\n   })\r\n }\r\n\r\n\r\n\r\n if(!chat) return 'loading...';\r\n\r\n  return(\r\n      <div className=\"chat-feed\">\r\n          <div className=\"chat-title-container\">\r\n            <div className=\"chat-title\">{chat.title}</div>\r\n            <div className=\"chat-subtitle\">\r\n              {chat.people.map((person)=> `${person.person.username}`)}\r\n            </div>\r\n          </div>\r\n          {renderMessages()}\r\n          <div style={{height: '100px' }} />\r\n          <div className=\"message-form-container\">\r\n            \r\n            <MessageForm  {...props } chatId={activeChat}/>\r\n          </div>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\nimport LoginForm from './components/LoginForm';\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\nimport './App.css';\r\nconst App =() => {\r\n\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n    return (\r\n        <ChatEngine\r\n             height=\"100vh\"\r\n             projectID=\"3c67aead-6773-4264-acce-13329c3d87be\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            \r\n            renderChatFeed={(chatAppProps) => <ChatFeed  {...chatAppProps} />}\r\n        />\r\n    )\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}